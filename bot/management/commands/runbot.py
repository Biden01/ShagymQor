from django.core.management.base import BaseCommand
from django.conf import settings
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
import json
from datetime import datetime, timedelta
from asgiref.sync import sync_to_async
from bot.models import Complaint, TelegramUser, Department, ComplaintHistory, Notification
from bot.services import ComplaintAnalyzer, DeadlineTracker
from bot.utils import analyze_complaint_text

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AppealStates(StatesGroup):
    waiting_for_description = State()
    waiting_for_location = State()
    waiting_for_photo = State()
    waiting_for_category = State()

class ComplaintStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_department = State()
    waiting_for_confirmation = State()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π (—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
DEPARTMENTS = {
    "akimat": "–ê–∫–∏–º–∞—Ç –≥–æ—Ä–æ–¥–∞",
    "education": "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "health": "–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
    "utilities": "–∂–∏–ª–∏—â–Ω–æ-–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —Ö–æ–∑—è–π—Å—Ç–≤–∞",
    "transport": "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "culture": "–∫—É–ª—å—Ç—É—Ä–∞ –∏ —Å–ø–æ—Ä—Ç",
    "social": "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞",
    "economy": "—ç–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –±—é–¥–∂–µ—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "architecture": "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –≥—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
    "land": "–∑–µ–º–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ",
    "youth": "–ú–æ–ª–æ–¥–æ–∂–Ω–æ–µ –¥–µ–ª–æ",
    "languages": "—Ä–∞–∑–≤–∏—Ç–∏–µ —è–∑—ã–∫–æ–≤",
    "business": "—Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
    "tourism": "—Ä–∞–∑–≤–∏—Ç–∏–µ —Ç—É—Ä–∏–∑–º–∞",
    "agriculture": "—Ä–∞–∑–≤–∏—Ç–∏–µ —Å–µ–ª—å—Å–∫–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞",
    "industry": "—Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏",
    "trade": "—Ä–∞–∑–≤–∏—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏",
    "investment": "—Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π",
    "innovation": "—Ä–∞–∑–≤–∏—Ç–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π",
    "digital": "—Ä–∞–∑–≤–∏—Ç–∏–µ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏"
}

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã ShagymQor'

    def __init__(self):
        super().__init__()
        self.bot = None
        self.dp = None
        self.storage = MemoryStorage()

    def get_main_keyboard(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        keyboard = [
            [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")],
            [KeyboardButton(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")],
            [KeyboardButton(text="üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ]
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

    def get_departments_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        keyboard = []
        row = []
        
        # –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        emojis = {
            "akimat": "üèõ",
            "education": "üìö",
            "health": "üè•",
            "utilities": "üîß",
            "transport": "üöó",
            "culture": "üé≠",
            "social": "üë•",
            "economy": "üí∞",
            "architecture": "üèó",
            "land": "üåç",
            "youth": "üë®‚Äçüéì",
            "languages": "üåê",
            "business": "üíº",
            "tourism": "‚úàÔ∏è",
            "agriculture": "üåæ",
            "industry": "üè≠",
            "trade": "üõç",
            "investment": "üìà",
            "innovation": "üí°",
            "digital": "üíª"
        }
        
        for dept_id, dept_name in DEPARTMENTS.items():
            if len(row) == 2:
                keyboard.append(row)
                row = []
            emoji = emojis.get(dept_id, "üìã")
            row.append(InlineKeyboardButton(
                text=f"{emoji} {dept_name}",
                callback_data=f"dept_{dept_id}"
            ))
        if row:
            keyboard.append(row)
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    async def setup_bot(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        self.bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher(storage=self.storage)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.dp.message.register(self.cmd_start, lambda msg: msg.text == "/start")
        self.dp.message.register(self.cmd_help, lambda msg: msg.text == "/help")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
        self.dp.message.register(self.create_appeal, lambda msg: msg.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ")
        self.dp.message.register(self.list_appeals, lambda msg: msg.text == "üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è")
        self.dp.message.register(self.show_statistics, lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.dp.message.register(self.show_notifications, lambda msg: msg.text == "üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
        self.dp.message.register(
            self.process_complaint_message,
            StateFilter(ComplaintStates.waiting_for_message)
        )
        self.dp.callback_query.register(
            self.process_department_confirmation,
            lambda c: c.data == "confirm_department",
            StateFilter(ComplaintStates.waiting_for_confirmation)
        )
        self.dp.callback_query.register(
            self.process_department_selection,
            lambda c: c.data.startswith("dept_"),
            StateFilter(ComplaintStates.waiting_for_department)
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        self.dp.message.register(self.handle_message)

    async def handle_message(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if message.text and not message.text.startswith('/'):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            department, confidence = await analyze_complaint_text(message.text)
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={department}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence}")
            
            if department and confidence >= 50:  # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 50%
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {department.name} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence}%")
                # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
                user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
                    user_id=message.from_user.id,
                    defaults={
                        'username': message.from_user.username,
                        'first_name': message.from_user.first_name,
                        'last_name': message.from_user.last_name
                    }
                )
                
                complaint = await sync_to_async(Complaint.objects.create)(
                    user=user,
                    department=department,
                    message=message.text,
                    status='new'
                )
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
                await sync_to_async(ComplaintHistory.objects.create)(
                    complaint=complaint,
                    status='new',
                    department=department,
                    comment=f'–û–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence:.1f}%'
                )
                
                await message.answer(
                    f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {department.name}!\n\n"
                    f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{complaint.id}\n"
                    f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {confidence:.1f}%\n"
                    f"–°—Ç–∞—Ç—É—Å: –ù–æ–≤–æ–µ\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.",
                    reply_markup=self.get_main_keyboard()
                )
            else:
                logger.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
                await message.answer(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
                    reply_markup=self.get_departments_keyboard()
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state = FSMContext(self.dp.storage, message.from_user.id, message.chat.id)
                await state.update_data(message=message.text)
                await state.set_state(ComplaintStates.waiting_for_department)

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = await sync_to_async(TelegramUser.objects.get_or_create)(
            user_id=message.from_user.id,
            defaults={
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name
            }
        )
        
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –®–∞“ì—ã–º Q–æ—Ä!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∞–∫–∏–º–∞—Ç –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å.\n\n"
            "üîπ –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
            "üîπ –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
            "üîπ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n"
            "üîπ –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=self.get_main_keyboard()
        )

    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await self.show_help(message)

    async def show_help(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = (
            "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º –®–∞“ì—ã–º Q–æ—Ä\n\n"
            "üìù –ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ '–û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ'\n"
            "2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"
            "4. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)\n"
            "5. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n\n"
            "üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n"
            "- –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
            "- –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "- –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            "- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n"
            "- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n"
            "- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n\n"
            "‚ùóÔ∏è –°—Ä–æ–∫–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π:\n"
            "- –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –¥–æ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n"
            "- –í–æ–ø—Ä–æ—Å—ã —Ç—Ä–µ–±—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: –¥–æ 15 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π\n"
            "- –°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: –¥–æ 30 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π"
        )
        await message.answer(help_text, reply_markup=self.get_main_keyboard())

    async def create_appeal(self, message: types.Message, state: FSMContext = None):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        if state is None:
            state = FSMContext(self.dp.storage, message.from_user.id, message.chat.id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await message.answer(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.\n\n"
            "–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
            "- –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Å–ª—É—á–∏–ª–æ—Å—å?\n"
            "- –ö–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?\n"
            "- –ö–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?\n\n"
            "–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤—ã –æ–ø–∏—à–µ—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –º—ã —Å–º–æ–∂–µ–º –ø–æ–º–æ—á—å."
        )
        await state.set_state(ComplaintStates.waiting_for_message)

    async def process_complaint_message(self, message: types.Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è"""
        user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
            user_id=message.from_user.id,
            defaults={
                'username': message.from_user.username,
                'first_name': message.from_user.first_name,
                'last_name': message.from_user.last_name
            }
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        department, confidence = await analyze_complaint_text(message.text)
        
        if department and confidence >= 50:  # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 50%
            await state.update_data(
                message=message.text,
                department_id=department.id,
                suggested_department=department.name,
                confidence=confidence
            )
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton(
                    text=f"–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ {department.name}",
                    callback_data="confirm_department"
                ),
                InlineKeyboardButton(
                    text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    callback_data="choose_department"
                )
            )
            
            await message.answer(
                f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n"
                f"üìã {department.name}\n"
                f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%\n\n"
                f"–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —ç—Ç–∏–º –≤—ã–±–æ—Ä–æ–º?",
                reply_markup=keyboard
            )
            await state.set_state(ComplaintStates.waiting_for_confirmation)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è
            await state.update_data(message=message.text)
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ:",
                reply_markup=self.get_departments_keyboard()
            )
            await state.set_state(ComplaintStates.waiting_for_department)

    async def process_department_confirmation(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        data = await state.get_data()
        user = await sync_to_async(TelegramUser.objects.get)(user_id=callback_query.from_user.id)
        department = await sync_to_async(Department.objects.get)(id=data['department_id'])
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        complaint = await sync_to_async(Complaint.objects.create)(
            user=user,
            department=department,
            message=data['message'],
            status='new'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        await sync_to_async(ComplaintHistory.objects.create)(
            complaint=complaint,
            status='new',
            department=department,
            comment='–û–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞'
        )
        
        await callback_query.message.edit_text(
            f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n"
            f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{complaint.id}\n"
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {department.name}\n"
            f"–°—Ç–∞—Ç—É—Å: –ù–æ–≤–æ–µ\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        )
        await state.clear()

    async def process_department_selection(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é"""
        dept_id = callback_query.data.replace("dept_", "")
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, _ = await sync_to_async(TelegramUser.objects.get_or_create)(
            user_id=callback_query.from_user.id,
            defaults={
                'username': callback_query.from_user.username,
                'first_name': callback_query.from_user.first_name,
                'last_name': callback_query.from_user.last_name
            }
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        department, _ = await sync_to_async(Department.objects.get_or_create)(
            name=DEPARTMENTS[dept_id],
            defaults={'description': f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {DEPARTMENTS[dept_id]}'}
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        complaint = await sync_to_async(Complaint.objects.create)(
            user=user,
            department=department,
            message=data['message'],
            status='new'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏
        await sync_to_async(ComplaintHistory.objects.create)(
            complaint=complaint,
            status='new',
            department=department,
            comment='–û–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.'
        )
        
        await callback_query.message.edit_text(
            f"‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {department.name}!\n\n"
            f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{complaint.id}\n"
            f"–°—Ç–∞—Ç—É—Å: –ù–æ–≤–æ–µ\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞—â–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        )
        await state.clear()

    async def list_appeals(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        get_user = sync_to_async(TelegramUser.objects.get)
        get_complaints = sync_to_async(
            lambda u: [
                {
                    'id': c.id,
                    'department_name': c.department.name if c.department else '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                    'created_at': c.created_at,
                    'status': c.get_status_display() if hasattr(c, 'get_status_display') else c.status
                }
                for c in Complaint.objects.filter(user=u).select_related('department').order_by('-created_at')
            ]
        )
        
        user = await get_user(user_id=message.from_user.id)
        complaints = await get_complaints(user)
        
        if not complaints:
            await message.answer(
                "üìã –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.\n"
                "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ'",
                reply_markup=self.get_main_keyboard()
            )
            return

        response = "üìã –í–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:\n\n"
        for complaint in complaints:
            status_emoji = {
                "new": "üÜï",
                "in_progress": "‚è≥",
                "completed": "‚úÖ",
                "overdue": "‚ùå"
            }.get(complaint['status'], "‚ùì")
            
            response += (
                f"{status_emoji} –û–±—Ä–∞—â–µ–Ω–∏–µ #{complaint['id']}\n"
                f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {complaint['department_name']}\n"
                f"üìÖ –î–∞—Ç–∞: {complaint['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                f"üìã –°—Ç–∞—Ç—É—Å: {complaint['status']}\n\n"
            )

        await message.answer(response, reply_markup=self.get_main_keyboard())

    async def show_statistics(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        get_stats = sync_to_async(lambda: {
            'total': Complaint.objects.count(),
            'completed': Complaint.objects.filter(status='completed').count(),
            'in_progress': Complaint.objects.filter(status='in_progress').count(),
            'new': Complaint.objects.filter(status='new').count()
        })
        
        stats = await get_stats()
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π:\n\n"
            f"üìà –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {stats['total']}\n"
            f"‚úÖ –†–µ—à–µ–Ω–æ: {stats['completed']}\n"
            f"‚è≥ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}\n"
            f"üÜï –ù–æ–≤—ã—Ö: {stats['new']}\n\n"
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        get_dept_stats = sync_to_async(lambda dept_name: {
            'department': Department.objects.filter(name=dept_name).first(),
            'total': Complaint.objects.filter(department__name=dept_name).count(),
            'completed': Complaint.objects.filter(department__name=dept_name, status='completed').count()
        })

        for dept_id, dept_name in DEPARTMENTS.items():
            dept_stats = await get_dept_stats(dept_name)
            if dept_stats['department'] and dept_stats['total'] > 0:
                efficiency = (dept_stats['completed'] / dept_stats['total']) * 100
                stats_text += (
                    f"{dept_name}:\n"
                    f"- –í—Å–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏–π: {dept_stats['total']}\n"
                    f"- –†–µ—à–µ–Ω–æ: {dept_stats['completed']}\n"
                    f"- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%\n\n"
                )

        await message.answer(stats_text, reply_markup=self.get_main_keyboard())

    async def show_notifications(self, message: types.Message):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user = await sync_to_async(TelegramUser.objects.get)(user_id=message.from_user.id)
        notifications = await sync_to_async(list)(
            Notification.objects.filter(user=user).order_by('-created_at')[:10]
        )
        
        if not notifications:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        text = "üì¨ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
        for notification in notifications:
            text += f"‚Ä¢ {notification.message}\n"
            text += f"  {notification.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        await message.answer(text)

    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.setup_bot()
            await self.dp.start_polling(self.bot)
        finally:
            if self.bot:
                await self.bot.session.close()

    def handle(self, *args, **options):
        """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            self.stdout.write(self.style.SUCCESS('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...'))
            asyncio.run(self.run_bot())
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}')) 