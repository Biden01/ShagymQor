from django.utils import timezone
from datetime import timedelta
from .models import Complaint, Department, AIAnalysis, DepartmentKPI, Notification, EmailNotification
from django.db import models
from asgiref.sync import sync_to_async

class ComplaintAnalyzer:
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.department_keywords = {
            'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –¥–æ—Ä–æ–≥–∏': [
                '–¥–æ—Ä–æ–≥–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–∞–≤—Ç–æ–±—É—Å', '—Ç—Ä–∞–º–≤–∞–π', '–º–µ—Ç—Ä–æ', '–ø–∞—Ä–∫–æ–≤–∫–∞', '—Å–≤–µ—Ç–æ—Ñ–æ—Ä',
                '–ø—Ä–æ–±–∫–∞', '–∞—Å—Ñ–∞–ª—å—Ç', '—è–º–∞', '—Ç—Ä–æ—Ç—É–∞—Ä', '–ø–µ—à–µ—Ö–æ–¥', '–ø–µ—Ä–µ—Ö–æ–¥', '–æ—Å—Ç–∞–Ω–æ–≤–∫–∞',
                '—Ç–∞–∫—Å–∏', '–º–∞—Ä—à—Ä—É—Ç', '—Ä–∞–∑–º–µ—Ç–∫–∞', '–∑–Ω–∞–∫', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫'
            ],
            'üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': [
                '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Ä–µ–º–æ–Ω—Ç', '–∑–¥–∞–Ω–∏–µ', '–¥–æ–º', '—Å—Ç—Ä–æ–π–∫–∞', '–ø–æ–¥—ä–µ–∑–¥', '–∫—Ä—ã—à–∞',
                '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç', '—Å—Ç–µ–Ω–∞', '–æ–∫–Ω–æ', '–¥–≤–µ—Ä—å', '–ª–∏—Ñ—Ç', '–ª–µ—Å—Ç–Ω–∏—Ü–∞', '—Ñ–∞—Å–∞–¥',
                '–±–∞–ª–∫–æ–Ω', '–ø–æ–¥–≤–∞–ª', '—á–µ—Ä–¥–∞–∫', '–∑–∞–±–æ—Ä', '–æ–≥—Ä–∞–∂–¥–µ–Ω–∏–µ'
            ],
            'üå≥ –≠–∫–æ–ª–æ–≥–∏—è': [
                '—ç–∫–æ–ª–æ–≥–∏—è', '–º—É—Å–æ—Ä', '–æ—Ç—Ö–æ–¥—ã', '–≤–æ–∑–¥—É—Ö', '–≤–æ–¥–∞', '–ø–æ—á–≤–∞', '–∑–µ–ª–µ–Ω—å',
                '–¥–µ—Ä–µ–≤–æ', '–∫—É—Å—Ç', '—Ü–≤–µ—Ç–æ–∫', '–≥–∞–∑–æ–Ω', '–ø–∞—Ä–∫', '—Å–∫–≤–µ—Ä', '–æ–∑–µ—Ä–æ',
                '—Ä–µ–∫–∞', '–∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ', '–≤—ã–±—Ä–æ—Å', '–¥—ã–º', '—à—É–º'
            ],
            'üîß –ñ–ö–•': [
                '–∂–∫—Ö', '–≤–æ–¥–∞', '–æ—Ç–æ–ø–ª–µ–Ω–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '–∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è', '–≥–∞–∑',
                '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–¥–æ–º', '–ø–æ–¥—ä–µ–∑–¥', '–ª–∏—Ñ—Ç', '–º—É—Å–æ—Ä', '—É–±–æ—Ä–∫–∞', '—Ä–µ–º–æ–Ω—Ç',
                '—É–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è', '—Ç–∞—Ä–∏—Ñ', '—Å—á–µ—Ç', '–æ–ø–ª–∞—Ç–∞', '–∫–≤–∞—Ä—Ç–ø–ª–∞—Ç–∞'
            ],
            'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': [
                '—à–∫–æ–ª–∞', '–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—É—á–∏—Ç–µ–ª—å', '—É—á–µ–Ω–∏–∫', '–∫–ª–∞—Å—Å',
                '—É—Ä–æ–∫', '—É—á–µ–±–Ω–∏–∫', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–∑–∞–≤—É—á', '—Å—Ç–æ–ª–æ–≤–∞—è', '—Å–ø–æ—Ä—Ç–∑–∞–ª',
                '–±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–∫—Ä—É–∂–æ–∫', '—Å–µ–∫—Ü–∏—è', '–æ–ª–∏–º–ø–∏–∞–¥–∞', '—ç–∫–∑–∞–º–µ–Ω'
            ],
            'üè• –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ': [
                '–±–æ–ª—å–Ω–∏—Ü–∞', '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', '–≤—Ä–∞—á', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '–ª–µ—á–µ–Ω–∏–µ',
                '–∞–ø—Ç–µ–∫–∞', '–ø—Ä–∏–≤–∏–≤–∫–∞', '–∞–Ω–∞–ª–∏–∑', '–¥–∏–∞–≥–Ω–æ–∑', '—Ç–µ—Ä–∞–ø–µ–≤—Ç', '–ø–µ–¥–∏–∞—Ç—Ä',
                '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥', '—Å–∫–æ—Ä–∞—è', '—Ä–µ—Ü–µ–ø—Ç', '–º–µ–¥–∏–∫–∞–º–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞'
            ],
            'üë• –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞': [
                '—Å–æ—Ü–∑–∞—â–∏—Ç–∞', '–ø–µ–Ω—Å–∏—è', '–ø–æ—Å–æ–±–∏–µ', '–ª—å–≥–æ—Ç–∞', '–∏–Ω–≤–∞–ª–∏–¥', '–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä',
                '–º–∞–ª–æ–∏–º—É—â–∏–π', '–º–Ω–æ–≥–æ–¥–µ—Ç–Ω—ã–π', '—Å–∏—Ä–æ—Ç–∞', '–±–µ–∂–µ–Ω–µ—Ü', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ',
                '–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è', '–≤—ã–ø–ª–∞—Ç–∞', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', '–∑–∞—â–∏—Ç–∞'
            ]
        }

    def analyze_text(self, text: str) -> dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        """
        text = text.lower()
        scores = {}
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for dept, keywords in self.department_keywords.items():
            score = sum(1 for keyword in keywords if keyword in text)
            if score > 0:
                scores[dept] = score
        
        if not scores:
            return {
                'department': 'üìã –î—Ä—É–≥–æ–µ',
                'confidence': 0.0,
                'keywords': []
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        max_score = max(scores.values())
        total_score = sum(scores.values())
        best_dept = max(scores.items(), key=lambda x: x[1])[0]
        
        # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        used_keywords = [
            keyword for keyword in self.department_keywords[best_dept]
            if keyword in text
        ]
        
        return {
            'department': best_dept,
            'confidence': max_score / total_score if total_score > 0 else 0.0,
            'keywords': used_keywords
        }

    @sync_to_async
    def save_analysis(self, complaint_id: int, analysis_result: dict) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        """
        from .models import Complaint, Department, AIAnalysis
        
        complaint = Complaint.objects.get(id=complaint_id)
        department, _ = Department.objects.get_or_create(
            name=analysis_result['department'],
            defaults={'description': f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {analysis_result["department"]}'}
        )
        
        AIAnalysis.objects.create(
            complaint=complaint,
            suggested_department=department,
            confidence_score=analysis_result['confidence'],
            keywords=analysis_result['keywords'],
            analysis_result=analysis_result
        )

class KPICalculator:
    def calculate_department_kpi(self, department: Department, period_start: timezone.datetime, 
                               period_end: timezone.datetime) -> DepartmentKPI:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç KPI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        complaints = Complaint.objects.filter(
            department=department,
            created_at__range=(period_start, period_end)
        )

        total = complaints.count()
        completed = complaints.filter(status='completed').count()
        overdue = complaints.filter(status='overdue').count()

        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        response_times = []
        for complaint in complaints:
            if complaint.response:
                response_time = complaint.updated_at - complaint.created_at
                response_times.append(response_time)

        avg_response_time = sum(response_times, timedelta()) / len(response_times) if response_times else None

        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        completion_times = []
        for complaint in complaints.filter(status='completed'):
            if complaint.completed_at:
                completion_time = complaint.completed_at - complaint.created_at
                completion_times.append(completion_time)

        avg_completion_time = sum(completion_times, timedelta()) / len(completion_times) if completion_times else None

        # –†–∞—Å—á–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤)
        satisfaction_rate = (completed / total * 100) if total > 0 else 0

        kpi = DepartmentKPI.objects.create(
            department=department,
            period=period_end.date(),
            total_complaints=total,
            completed_complaints=completed,
            overdue_complaints=overdue,
            average_response_time=avg_response_time,
            average_completion_time=avg_completion_time,
            satisfaction_rate=satisfaction_rate
        )

        return kpi

class NotificationService:
    @sync_to_async
    def send_notification(self, complaint: Complaint, notification_type: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        notification = Notification.objects.create(
            user=complaint.user,
            complaint=complaint,
            type=notification_type,
            message=message
        )
        return notification

    def send_email_notification(self, complaint: Complaint, email: str, subject: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        email_notification = EmailNotification.objects.create(
            user=complaint.user,
            complaint=complaint,
            email=email,
            subject=subject,
            message=message
        )
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        return email_notification

    def check_deadlines(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        now = timezone.now()
        upcoming_deadlines = Complaint.objects.filter(
            status__in=['new', 'in_progress'],
            deadline__isnull=False,
            deadline__gt=now,
            deadline__lte=now + timedelta(days=1)
        )

        for complaint in upcoming_deadlines:
            self.send_notification(
                complaint,
                'deadline',
                f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{complaint.id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞'
            )

class DeadlineTracker:
    def __init__(self):
        self.priority_deadlines = {
            'low': timedelta(days=15),
            'medium': timedelta(days=10),
            'high': timedelta(days=5)
        }

    @sync_to_async
    def check_deadlines(self) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        from .models import Complaint, Notification, DepartmentKPI
        from django.utils import timezone
        
        now = timezone.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
        active_complaints = Complaint.objects.filter(
            status__in=['new', 'in_progress']
        ).select_related('user', 'department')
        
        for complaint in active_complaints:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            deadline = complaint.created_at + self.priority_deadlines[complaint.priority]
            
            # –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫
            if now > deadline and complaint.status != 'overdue':
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                complaint.status = 'overdue'
                complaint.save()
                
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                Notification.objects.create(
                    user=complaint.user,
                    complaint=complaint,
                    type='deadline',
                    message=f"‚ö†Ô∏è –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{complaint.id} –∏—Å—Ç–µ–∫!\n"
                           f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {complaint.department.name}\n"
                           f"–°—Ç–∞—Ç—É—Å: –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º KPI —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                kpi, _ = DepartmentKPI.objects.get_or_create(
                    department=complaint.department,
                    period=now.strftime('%Y-%m')
                )
                kpi.overdue_complaints += 1
                kpi.save()
            
            # –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ –¥–µ–Ω—å
            elif deadline - now <= timedelta(days=1) and not Notification.objects.filter(
                complaint=complaint,
                type='deadline',
                created_at__gte=now - timedelta(days=1)
            ).exists():
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                Notification.objects.create(
                    user=complaint.user,
                    complaint=complaint,
                    type='deadline',
                    message=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è #{complaint.id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ –¥–µ–Ω—å!\n"
                           f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {complaint.department.name}\n"
                           f"–°—Ç–∞—Ç—É—Å: {complaint.get_status_display()}"
                )

    @sync_to_async
    def update_kpi(self) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç KPI —É–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        """
        from .models import Department, DepartmentKPI, Complaint
        from django.utils import timezone
        from django.db.models import Count, Avg
        from datetime import timedelta
        
        now = timezone.now()
        period = now.strftime('%Y-%m')
        
        for department in Department.objects.all():
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
            complaints = Complaint.objects.filter(
                department=department,
                created_at__year=now.year,
                created_at__month=now.month
            )
            
            total = complaints.count()
            completed = complaints.filter(status='completed').count()
            overdue = complaints.filter(status='overdue').count()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            completed_complaints = complaints.filter(status='completed')
            avg_completion_time = completed_complaints.aggregate(
                avg_time=Avg('completed_at' - 'created_at')
            )['avg_time']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
            satisfaction_rate = 0.0
            if total > 0:
                on_time = completed_complaints.filter(
                    completed_at__lte=models.F('created_at') + self.priority_deadlines['medium']
                ).count()
                satisfaction_rate = (on_time / total) * 100
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º KPI
            kpi, _ = DepartmentKPI.objects.get_or_create(
                department=department,
                period=period
            )
            
            kpi.total_complaints = total
            kpi.completed_complaints = completed
            kpi.overdue_complaints = overdue
            kpi.average_completion_time = avg_completion_time
            kpi.satisfaction_rate = satisfaction_rate
            kpi.save() 